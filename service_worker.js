// AutoGenerated Wed Jun 19 22:40:48 IST 2024

var serviceWorkerAppShellCacheId = "dwaitanidhi-cache-040720241457"; //ddmmyyyyhhmm

// const PRECACHE_ASSETS = ['/fonts/', '/images/', '/kridanta/'];

self.addEventListener('install', (e) => {
  self.skipWaiting();
  e.waitUntil(caches.open(serviceWorkerAppShellCacheId).then(function (cache) {
    cache.add('/');
    cache.add('index.php');
  }))
});

self.addEventListener(
  'activate', (e) => {
    e.waitUntil(clients.claim());

    e.waitUntil(caches.keys().then(function (keyList) {
      return Promise.all(keyList.map((key) => {
        if (key !== serviceWorkerAppShellCacheId) {
          return caches.delete(key);
        }
      }))
    }))
});


self.addEventListener('fetch', (e) => {
    /* Bypass non-GET requests */
    if (e.request.method != 'GET') {
      e.respondWith(fetch(e.request));
      return;
    }
    /* Bypass github, prakriya, analytics requests */
    var bypassUrls = [
      'sanskritworld',
      'githubusercontent',
      'jsdelivr',
      'jsondata',
      'drive',
      'unsplash',
      'api.github.com',
      'googletagmanager',
    ];
    
    for (var i = 0; i < bypassUrls.length; ++i) {
      var url = bypassUrls[i];
      if (e.request.url.indexOf(url) >= 0) {
        e.respondWith(fetch(e.request));
        return;
      }
    }
  

    var permittedExtensions = [".pdf", ".php", ".css", ".js", ".png", ".svg", ".jpeg", ".jpg", ".mp3", 
    ".m4a", ".ico", ".woff", ".woff2", ".txt", ".json", ".html"];

    var url = e.request.url;
    if (!permittedExtensions.find(ext => url.endsWith(ext))) {
      url = "/";
      e.request.url = url;
    }

    // Cache first. Do not add "ignoresearch" here. Causes too may problems.
    e.respondWith(
      caches.match(url)
        .then(async (response) => {
          if (response) {
            return response;
          } else {
            const result = await fetch(e.request);
            var resultToCache = result.clone();
            caches.open(serviceWorkerAppShellCacheId).then(function (cache) {
              cache.put(url, resultToCache);
            });
            return result;
          }
        })
        .catch(async (error) => {
          caches.open(serviceWorkerAppShellCacheId).then(function (cache) {
            cache.match('index.php');
        });
    }));
});

/**
 * Storage-test:https://storage-quota.glitch.me/
 * IndexedDB (Localforage) for data.
 * CacheStorage for pages
 */
